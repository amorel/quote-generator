services:
  shared:
    build:
      context: ./shared
      dockerfile: Dockerfile
    restart: "no"
    networks:
      - back-network
    command: echo "Shared package built successfully"

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - back-network
    restart: unless-stopped
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--no-verbose",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:3000/health",
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 30s
    depends_on:
      shared:
        condition: service_completed_successfully
      auth-db:
        condition: service_healthy

  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - AUTH_SERVICE_URL=http://auth-service:3001
      - QUOTE_SERVICE_URL=http://quote-service:3002
    networks:
      - back-network
      - front-network
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--no-verbose",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:3000/health",
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 30s
    restart: unless-stopped
    # depends_on:
    #   auth-service:
    #     condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: services/frontend/Dockerfile
    ports:
      - "3006:3006"
    environment:
      - VITE_PORT=3006
    env_file:
      - .env
    networks:
      - front-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://frontend:3006",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # depends_on:
    #   api-gateway:
    #     condition: service_healthy

  quote-service:
    build:
      context: .
      dockerfile: services/quote-service/Dockerfile
    ports:
      - "3002:3002"
    env_file:
      - .env
    environment:
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - PORT=3002
    networks:
      - back-network
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--no-verbose",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:3002/health",
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 30s
    restart: unless-stopped
    depends_on:
      shared:
        condition: service_completed_successfully
      quote-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    env_file:
      - .env
    environment:
      - ASPNETCORE_URLS=http://+:3003
      - ConnectionStrings__DefaultConnection=Host=user-db;Port=5432;Database=userservice;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=${RABBITMQ_DEFAULT_USER:-admin}
      - RabbitMQ__Password=${RABBITMQ_DEFAULT_PASS:-password}
    networks:
      - back-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    depends_on:
      user-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  auth-db:
    image: mongo:latest
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - ./mongo-init/auth-db:/docker-entrypoint-initdb.d
      - auth-data:/data/db
    networks:
      - back-network
    restart: unless-stopped
    healthcheck:
      test: >
        mongosh --eval 'db.runCommand("ping").ok' --quiet
        --username ${MONGO_INITDB_ROOT_USERNAME}
        --password ${MONGO_INITDB_ROOT_PASSWORD}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  quote-db:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - ./mongo-init/quote-db:/docker-entrypoint-initdb.d
      - quote-data:/data/db
    networks:
      - back-network
    restart: unless-stopped
    healthcheck:
      test: >
        mongosh --eval 'db.runCommand("ping").ok' --quiet
        --username ${MONGO_INITDB_ROOT_USERNAME}
        --password ${MONGO_INITDB_ROOT_PASSWORD}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  user-db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=userservice
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/user-service/src/UserService.Infrastructure/Data/Scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - back-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-password}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - back-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

volumes:
  auth-data:
  quote-data:
  postgres_data:
  rabbitmq_data:

networks:
  front-network:
  back-network:
