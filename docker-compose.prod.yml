services:
  shared:
    build:
      context: .
      dockerfile: shared/Dockerfile
      args:
        NODE_ENV: production
    image: quote-generator-shared:${TAG}
    

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
      args:
        NODE_ENV: production
    image: quote-generator-auth-service:${TAG}
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - shared
      - auth-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
      args:
        NODE_ENV: production
    image: quote-generator-api-gateway:${TAG}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - auth-service
      - quote-service
      - user-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: services/frontend/Dockerfile.prod
    image: quote-generator-frontend:${TAG}
    ports:
      - "80:80" # Utilisation de nginx en production
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      - api-gateway
    restart: unless-stopped

  quote-service:
    build:
      context: .
      dockerfile: services/quote-service/Dockerfile
      args:
        NODE_ENV: production
    image: quote-generator-quote-service:${TAG}
    ports:
      - "3002:3002"
    environment:
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - NODE_ENV=production
    depends_on:
      - shared
      - quote-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
      args:
        NODE_ENV: production
    image: quote-generator-user-service:${TAG}
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
    depends_on:
      - shared
      - user-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-db:
    image: mongo:latest
    volumes:
      - auth-data:/data/db
    restart: unless-stopped
    command: ["--auth"] # Activer l'authentification MongoDB

  quote-db:
    image: mongo:latest
    volumes:
      - quote-data:/data/db
    restart: unless-stopped
    command: ["--auth"]

  user-db:
    image: mongo:latest
    volumes:
      - user-data:/data/db
    restart: unless-stopped
    command: ["--auth"]

volumes:
  auth-data:
  quote-data:
  user-data:

networks:
  default:
    driver: bridge
